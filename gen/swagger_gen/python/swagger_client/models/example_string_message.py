# coding: utf-8

"""
    service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExampleStringMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
			    and the value is attribute type.
      attribute_map (dict): The key is attribute name
			    and the value is json key in definition.
    """
    swagger_types = {
	'value': 'str'
    }

    attribute_map = {
	'value': 'value'
    }

    def __init__(self, value=None):
	"""
	ExampleStringMessage - a model defined in Swagger
	"""

	self._value = None
	self.discriminator = None

	if value is not None:
	  self.value = value

    @property
    def value(self):
	"""
	Gets the value of this ExampleStringMessage.

	:return: The value of this ExampleStringMessage.
	:rtype: str
	"""
	return self._value

    @value.setter
    def value(self, value):
	"""
	Sets the value of this ExampleStringMessage.

	:param value: The value of this ExampleStringMessage.
	:type: str
	"""

	self._value = value

    def to_dict(self):
	"""
	Returns the model properties as a dict
	"""
	result = {}

	for attr, _ in iteritems(self.swagger_types):
	    value = getattr(self, attr)
	    if isinstance(value, list):
		result[attr] = list(map(
		    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
		    value
		))
	    elif hasattr(value, "to_dict"):
		result[attr] = value.to_dict()
	    elif isinstance(value, dict):
		result[attr] = dict(map(
		    lambda item: (item[0], item[1].to_dict())
		    if hasattr(item[1], "to_dict") else item,
		    value.items()
		))
	    else:
		result[attr] = value

	return result

    def to_str(self):
	"""
	Returns the string representation of the model
	"""
	return pformat(self.to_dict())

    def __repr__(self):
	"""
	For `print` and `pprint`
	"""
	return self.to_str()

    def __eq__(self, other):
	"""
	Returns true if both objects are equal
	"""
	if not isinstance(other, ExampleStringMessage):
	    return False

	return self.__dict__ == other.__dict__

    def __ne__(self, other):
	"""
	Returns true if both objects are not equal
	"""
	return not self == other
