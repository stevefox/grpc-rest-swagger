# coding: utf-8

"""
    service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class YourServiceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
	if api_client is None:
	    api_client = ApiClient()
	self.api_client = api_client

    def echo(self, body, **kwargs):
	"""
	This method makes a synchronous HTTP request by default. To make an
	asynchronous HTTP request, please pass async=True
	>>> thread = api.echo(body, async=True)
	>>> result = thread.get()

	:param async bool
	:param ExampleStringMessage body: (required)
	:return: ExampleStringMessage
		 If the method is called asynchronously,
		 returns the request thread.
	"""
	kwargs['_return_http_data_only'] = True
	if kwargs.get('async'):
	    return self.echo_with_http_info(body, **kwargs)
	else:
	    (data) = self.echo_with_http_info(body, **kwargs)
	    return data

    def echo_with_http_info(self, body, **kwargs):
	"""
	This method makes a synchronous HTTP request by default. To make an
	asynchronous HTTP request, please pass async=True
	>>> thread = api.echo_with_http_info(body, async=True)
	>>> result = thread.get()

	:param async bool
	:param ExampleStringMessage body: (required)
	:return: ExampleStringMessage
		 If the method is called asynchronously,
		 returns the request thread.
	"""

	all_params = ['body']
	all_params.append('async')
	all_params.append('_return_http_data_only')
	all_params.append('_preload_content')
	all_params.append('_request_timeout')

	params = locals()
	for key, val in iteritems(params['kwargs']):
	    if key not in all_params:
		raise TypeError(
		    "Got an unexpected keyword argument '%s'"
		    " to method echo" % key
		)
	    params[key] = val
	del params['kwargs']
	# verify the required parameter 'body' is set
	if ('body' not in params) or (params['body'] is None):
	    raise ValueError("Missing the required parameter `body` when calling `echo`")


	collection_formats = {}

	path_params = {}

	query_params = []

	header_params = {}

	form_params = []
	local_var_files = {}

	body_params = None
	if 'body' in params:
	    body_params = params['body']
	# HTTP header `Accept`
	header_params['Accept'] = self.api_client.\
	    select_header_accept(['application/json'])

	# HTTP header `Content-Type`
	header_params['Content-Type'] = self.api_client.\
	    select_header_content_type(['application/json'])

	# Authentication setting
	auth_settings = []

	return self.api_client.call_api('/v1/example/echo', 'POST',
					path_params,
					query_params,
					header_params,
					body=body_params,
					post_params=form_params,
					files=local_var_files,
					response_type='ExampleStringMessage',
					auth_settings=auth_settings,
					async=params.get('async'),
					_return_http_data_only=params.get('_return_http_data_only'),
					_preload_content=params.get('_preload_content', True),
					_request_timeout=params.get('_request_timeout'),
					collection_formats=collection_formats)
